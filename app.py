from flask import Flask, render_template, request 
import os
from config import OPENAI_API_KEY
import openai
OPENAI_API_KEY = OPENAI_API_KEY
import re
app = Flask(__name__)


@app.route("/")
def home():
    return render_template("index.html")


@app.route("/about")
def about():
    return render_template("about.html")


@app.route("/contact")
def contact():
    return "<h1>Contact Page</h1><p>This page is under construction.</p>"


# scores generated by chat gpt , for reference only
mbti_compatibility_scores = {
    ('INTJ', 'ENTP'): 90,
    ('INTJ', 'INFJ'): 70,
    ('ENTP', 'INFJ'): 50,
    ('INTJ', 'INTJ'): 65,
    ('ENTP', 'ENTP'): 75,
    ('INFJ', 'INFJ'): 80,
    ('INTJ', 'ENFP'): 85,
    ('ENFP', 'INFJ'): 95,
    ('INTJ', 'ISTJ'): 60,
    ('ISTJ', 'INFJ'): 55,
    ('ENTP', 'ISTJ'): 45,
    ('ENFP', 'ENTP'): 80,
    ('ISTJ', 'ISTJ'): 70,
    ('INTJ', 'ESTJ'): 40,
    ('ESTJ', 'INFJ'): 50,
    ('ESTJ', 'ENTP'): 35,
    ('ENFP', 'ESTJ'): 55,
    ('ENFP', 'ENFP'): 90,
    ('ISFJ', 'INFJ'): 75,
    ('ISFJ', 'INTJ'): 50,
    ('ISFJ', 'ENTP'): 40,
    ('ISFJ', 'ENFP'): 65,
    ('ISFJ', 'ISFJ'): 85,
    ('ESFP', 'INTJ'): 30,
    ('ESFP', 'ENTP'): 55,
    ('ESFP', 'INFJ'): 45,
    ('ESFP', 'ENFP'): 75,
    ('ESFP', 'ISFJ'): 60,
    ('ESFP', 'ESFP'): 80
}

# scores generated by chat gpt, for reference only
astro_compatibility_scores = {
    ('Aries', 'Leo'): 80,
    ('Aries', 'Scorpio'): 50,
    ('Aries', 'Aries'): 60,
    ('Aries', 'Gemini'): 75,
    ('Aries', 'Cancer'): 45,
    ('Aries', 'Taurus'): 55,
    ('Aries', 'Virgo'): 50,
    ('Aries', 'Libra'): 65,
    ('Aries', 'Capricorn'): 40,
    ('Aries', 'Aquarius'): 70,
    ('Aries', 'Pisces'): 55,
    ('Aries', 'Sagittarius'): 85,

    ('Taurus', 'Taurus'): 75,
    ('Taurus', 'Gemini'): 50,
    ('Taurus', 'Cancer'): 80,
    ('Taurus', 'Leo'): 65,
    ('Taurus', 'Virgo'): 85,
    ('Taurus', 'Libra'): 55,
    ('Taurus', 'Scorpio'): 45,
    ('Taurus', 'Sagittarius'): 40,
    ('Taurus', 'Capricorn'): 85,
    ('Taurus', 'Aquarius'): 45,
    ('Taurus', 'Pisces'): 75,

    ('Gemini', 'Gemini'): 80,
    ('Gemini', 'Cancer'): 50,
    ('Gemini', 'Leo'): 75,
    ('Gemini', 'Virgo'): 50,
    ('Gemini', 'Libra'): 85,
    ('Gemini', 'Scorpio'): 40,
    ('Gemini', 'Sagittarius'): 80,
    ('Gemini', 'Capricorn'): 45,
    ('Gemini', 'Aquarius'): 90,
    ('Gemini', 'Pisces'): 65,

    ('Cancer', 'Cancer'): 85,
    ('Cancer', 'Leo'): 55,
    ('Cancer', 'Virgo'): 75,
    ('Cancer', 'Libra'): 50,
    ('Cancer', 'Scorpio'): 85,
    ('Cancer', 'Sagittarius'): 45,
    ('Cancer', 'Capricorn'): 55,
    ('Cancer', 'Aquarius'): 45,
    ('Cancer', 'Pisces'): 90,

    ('Leo', 'Leo'): 85,
    ('Leo', 'Virgo'): 50,
    ('Leo', 'Libra'): 75,
    ('Leo', 'Scorpio'): 45,
    ('Leo', 'Sagittarius'): 90,
    ('Leo', 'Capricorn'): 50,
    ('Leo', 'Aquarius'): 70,
    ('Leo', 'Pisces'): 55,

    ('Virgo', 'Virgo'): 85,
    ('Virgo', 'Libra'): 55,
    ('Virgo', 'Scorpio'): 75,
    ('Virgo', 'Sagittarius'): 45,
    ('Virgo', 'Capricorn'): 90,
    ('Virgo', 'Aquarius'): 50,
    ('Virgo', 'Pisces'): 65,

    ('Libra', 'Libra'): 80,
    ('Libra', 'Scorpio'): 50,
    ('Libra', 'Sagittarius'): 65,
    ('Libra', 'Capricorn'): 45,
    ('Libra', 'Aquarius'): 85,
    ('Libra', 'Pisces'): 75,

    ('Scorpio', 'Scorpio'): 85,
    ('Scorpio', 'Sagittarius'): 40,
    ('Scorpio', 'Capricorn'): 75,
    ('Scorpio', 'Aquarius'): 45,
    ('Scorpio', 'Pisces'): 90,

    ('Sagittarius', 'Sagittarius'): 85,
    ('Sagittarius', 'Capricorn'): 45,
    ('Sagittarius', 'Aquarius'): 80,
    ('Sagittarius', 'Pisces'): 70,

    ('Capricorn', 'Capricorn'): 90,
    ('Capricorn', 'Aquarius'): 50,
    ('Capricorn', 'Pisces'): 55,

    ('Aquarius', 'Aquarius'): 85,
    ('Aquarius', 'Pisces'): 75,

    ('Pisces', 'Pisces'): 85
}



def calculate_compatibility(user_mbti, user_astro, groupmates):
    total_score = 0
    individual_scores = []
    
    for gm_mbti, gm_astro in groupmates:
        mbti_key = tuple(sorted([user_mbti, gm_mbti]))
        astro_key = tuple(sorted([user_astro, gm_astro]))

        mbti_score = mbti_compatibility_scores.get(mbti_key, 50)  
        astro_score = astro_compatibility_scores.get(astro_key, 50)  # default score

        # Calculate average score for each pair
        pair_score = (mbti_score + astro_score) / 2
        individual_scores.append(pair_score)
        total_score += pair_score

    # Calculate overall compatibility average for the group (if they decide to work tgt)
    if individual_scores:
        final_score = total_score / len(individual_scores)
    else:
        final_score = 0
    
    return final_score, individual_scores

# I asked chat gpt: how to clean some wired characters from my analysis
def clean_text(text):
    """Remove non-ASCII characters and ensure text is in English."""
    text = re.sub(r'[^\x00-\x7F]+', ' ', text)  # Remove non-ASCII characters
    return text

def get_compatibility_analysis(user_mbti, user_astro, groupmates):
    overall_score, individual_scores = calculate_compatibility(user_mbti, user_astro, groupmates)
    details = []

    for index, (groupmate_mbti, groupmate_astro) in enumerate(groupmates):
        score = individual_scores[index]
        prompt = f"Please provide a compatibility analysis in English for the following pair: {user_mbti} ({user_astro}) and {groupmate_mbti} ({groupmate_astro}). Consider both MBTI traits and astrological characteristics. The compatibility score is {score}. Explain in detail in 150 words max."
        try:
            response = openai.Completion.create(
                engine="gpt-3.5-turbo-instruct",
                prompt=prompt,
                max_tokens=300,  # to make sure lines don't cut-off
                temperature=0.7,  # tone control, can adjust~
                api_key=OPENAI_API_KEY
            )
            explanation = clean_text(response.choices[0].text.strip())
        except Exception as e:
            explanation = f"Error in generating compatibility explanation: {str(e)}"

        details.append({
            "groupmate_index": index + 1,
            "groupmate_mbti": groupmate_mbti,
            "groupmate_astro": groupmate_astro,
            "score": score,
            "explanation": explanation
        })

    return overall_score, details

@app.route("/submit", methods=["GET", "POST"])
def submit():
    if request.method == "POST":
        user_mbti = request.form["mbti"]
        user_astro = request.form["astro"]
        groupmates = []

        for i in range(3):  # up to 3 groupmates
            groupmate_mbti = request.form.get(f"groupmate{i}_mbti")
            groupmate_astro = request.form.get(f"groupmate{i}_astro")
            if groupmate_mbti and groupmate_astro:
                groupmates.append((groupmate_mbti, groupmate_astro))

        overall_score, details = get_compatibility_analysis(user_mbti, user_astro, groupmates)
        print(f"Overall Score: {overall_score}")
        print(f"Details: {details}")

        results = {
            "overall_score": overall_score,
            "details": details
        }
    
        return render_template("results.html", results=results)
    else:
        return render_template("index.html")

    
if __name__ == "__main__":
    app.run(debug=True)
